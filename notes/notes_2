## Modules, Functions, Types

>> MODULES

A module consists of a set of imports and exports and when compiled generates an interface which is linked against 
other Haskell modules. A module may reexport symbols from other modules.

	-- A module starts with its export declarations of symbols declared in this file.
	module MyModule (myExport1, myExport2) where

	-- Followed by a set of imports of symbols from other files
	import OtherModule (myImport1, myImport2)

	-- Rest of the logic and definitions in the module follow
	-- ...

Modules’ dependency graphs optionally may be cyclic (i.e. they import symbols from each other) through the use of a 
boot file, but this is often best avoided if at all possible.

Various module import strategies - 

Import all symbols into the local namespace:
	import Data.List

Import select symbols into the local namespace:
	import Data.List (nub, sort)

Import into the global namespace masking a symbol:
	import Data.List hiding (nub)

Import symbols qualified under Data.Map namespace into the local namespace:
	import qualified Data.Map

Import symbols qualified and reassigned to a custom namespace (M, in the example below):
	import qualified Data.Map as M

You may also dump multiple modules into the same namespace so long as the symbols do not clash:
	import qualified Data.Map as M
	import qualified Data.Map.Strict as M

A main module is a special module which reserves the name Main and has a mandatory export of type IO () which is 
invoked when the executable is run.. This is the entry point from the system into a Haskell program.

	module Main where
	main = print "Hello World!"


>> FUNCTIONS

Functions are the central construction in Haskell. A function f of two arguments x and y can be defined in a single 
line as the left-hand and right-hand side of an equation:
	f x y = x + y

In addition to named functions Haskell also has anonymous lambda functions denoted with a backslash. For example the 
identity function:
	id x = x
Is identical to:
	id = \x -> x


>> TYPES

# NOTE: Dynamic programming languages associate types with values at evaluation, whereas statically typed languages 
associate types to expressions before evaluation. Dynamic languages are in a sense as statically typed as static 
languages, however they have a degenerate type system with only one type.

The dominant philosophy in functional programming is to “make invalid states unrepresentable” at compile-time, 
rather than performing massive amounts of runtime checks. To this end Haskell has developed a rich type system that 
is based on typed lambda calculus known as Girard’s System-F (See Rank-N Types) and has incrementally added 
extensions to support more type-level programming over the years.

The following ground types are quite common:
> () - The unit type
> Char - A single unicode character (“code point”)
> Text - Unicode strings
> Bool - Boolean values
> Int - Machine integers
> Integer - GMP arbitrary precision integers
> Float - Machine floating point values
> Double - Machine double floating point values

Parameterised types consist of a type and several type parameters indicated as lower case type variables. These are associated with common data structures such as lists and tuples.
> [a] – Homogeneous lists with elements of type a
> (a,b) – Tuple with two elements of types a and b
> (a,b,c) – Tuple with three elements of types a, b, and c


